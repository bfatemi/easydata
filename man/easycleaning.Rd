% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/easycleaning.R
\name{easycleaning}
\alias{easycleaning}
\alias{CleanCols}
\alias{CleanRows}
\alias{ddup}
\alias{Booleanize}
\alias{RoundCols}
\alias{p_setcolorder}
\title{Functions to help with Data Cleaning}
\usage{
CleanCols(DT)

CleanRows(DT, cols = NULL, index = FALSE)

ddup(DT, cols = NULL, verbose = TRUE)

Booleanize(DT = NULL, cols = NULL, value = NULL, not = FALSE)

RoundCols(DT, digits = 2, igncols = NULL, cols = NULL, b_skip = FALSE,
  b_copy = TRUE)

p_setcolorder(DT, cols = NULL, aslast = TRUE, verbose = FALSE)
}
\arguments{
\item{DT}{A data table to operate on}

\item{cols}{columns of a data.table to focus the operation on}

\item{index}{In the case of \code{CleanRows}, if \code{index} is TRUE, 
an Index column will be created to track which rows were removed}

\item{verbose}{A boolean indicating whether to print information on the console}

\item{value}{In the case of booleanize, a value to look for throughout the table}

\item{not}{A boolean. Negates the output of \code{booleanize}}

\item{digits}{A numeric indicating the number of digits to round in \code{RoundCols}}

\item{igncols}{A character vector indicating which columns to ignore}

\item{b_skip}{A boolean indicating whether to skip non-numeric columns that \code{RoundCols} encounters}

\item{b_copy}{A boolean indicating whether to make a copy of the data, or operate on by reference}

\item{aslast}{A boolean indicating whether arrange the non-order columns before or after (asLast = TRUE)
the ordered ones}
}
\description{
Functions to help with Data Cleaning
}
\section{Functions}{
\itemize{
\item \code{CleanCols}: A function to remove all columns that have ONLY NA values

\item \code{CleanRows}: A function to remove na rows in specified columes

\item \code{ddup}: A function to remove duplicates across all columns (default),
or a given set of columns

\item \code{Booleanize}: A function that turns a data.table into all logical values based on finding the value arg
in all or selected columns

\item \code{RoundCols}: A convienience wrapper for \code{round} that applies to all or a subset of cols

\item \code{p_setcolorder}: A convienience wrapper for \code{data.table::setcolorder} that makes it easy 
set the order of a subset of columns
}}

\examples{
# Examples of: ClassMorph, pcc, CleanCols, CleanRows, easyswap, Booleanize

#-------------------------------------------------------------------------------------
# Example: Change column classes in batch
#-------------------------------------------------------------------------------------

library(data.table)

DT <- data.table(A = as.factor(c(1:2, "-", 4:5)),
                 B = rep(2.0, 5),
                 C = as.factor(c(1, "garbage", 2, "", 3)),
                 D = as.factor(rep(999, 5)),
                 E = letters[1:5],
                 F = rep("2020-01-22", 5),
                 G = c(1, rep(NA, 4)),
                 H = NA)
DT
# > DT
#    A B       C   D E          F  G  H
# 1: 1 2       1 999 a 2020-01-22  1 NA
# 2: 2 2 garbage 999 b 2020-01-22 NA NA
# 3: - 2       2 999 c 2020-01-22 NA NA
# 4: 4 2         999 d 2020-01-22 NA NA
# 5: 5 2       3 999 e 2020-01-22 NA NA

# no error, and by reference. To operate on a copy, run with copy=TRUE
ClassMorph(DT, "factor", "integer", force = TRUE)
pcc(DT)

#-------------------------------------------------------------------------------------
# Example: Clean columns or rows
#
# Sometimes a set operation will result in a bunch of columns being all NAs and if
# there are many columns, it's useful to drop all of them:
#-------------------------------------------------------------------------------------
cDT <- CleanCols(DT) # Drop all NA columns

# Drop rows based on NA value in ANY column, or a subset of columns
CleanRows(cDT)               # remove all rows that have an NA value across any of the columns
CleanRows(cDT, "A")          # just in one column
CleanRows(cDT, c("A", "C"))  # subset of columns


#-------------------------------------------------------------------------------------
# Use Booleanize if you want to identify a particular value
#-------------------------------------------------------------------------------------

bDT <- Booleanize(DT, value = 1)

# > bDT
#        A     B     C     D     E     F    G  H
# 1:  TRUE FALSE  TRUE FALSE FALSE FALSE TRUE NA
# 2: FALSE FALSE    NA FALSE FALSE FALSE   NA NA
# 3:    NA FALSE FALSE FALSE FALSE FALSE   NA NA
# 4: FALSE FALSE    NA FALSE FALSE FALSE   NA NA
# 5: FALSE FALSE FALSE FALSE FALSE FALSE   NA NA


}
